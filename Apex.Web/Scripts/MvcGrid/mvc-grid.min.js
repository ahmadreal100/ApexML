/*!
 * Mvc.Grid 5.0.0
 * https://github.com/NonFactors/MVC5.Grid
 *
 * Copyright Â© NonFactors
 *
 * Licensed under the terms of the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */
var MvcGrid = function () { function e(e, t) { if (this.columns = [], this.element = e, t = t || {}, this.data = t.data, this.name = e.attr("data-name"), this.rowClicked = t.rowClicked, this.methods = { reload: this.reload }, this.reloadEnded = t.reloadEnded, this.loadingDelay = t.loadingDelay, this.reloadFailed = t.reloadFailed, this.reloadStarted = t.reloadStarted, this.requestType = t.requestType || "get", this.prefix = "" == this.name ? "" : this.name + "-", this.filterMode = e.attr("data-filter-mode") || "ExcelRow", this.showLoading = null == t.showLoading || t.showLoading, this.sourceUrl = t.sourceUrl || e.attr("data-source-url") || "", this.filters = $.extend({ enum: new MvcGridEnumFilter, date: new MvcGridDateFilter, text: new MvcGridTextFilter, number: new MvcGridNumberFilter, boolean: new MvcGridBooleanFilter }, t.filters), this.sourceUrl) { var r = this.sourceUrl.indexOf("?"); r > -1 ? (this.query = this.sourceUrl.substring(r + 1), this.sourceUrl = this.sourceUrl.substring(0, r)) : this.query = null == t.query ? "" : t.query } else this.query = window.location.search.replace("?", ""); var i = !this.sourceUrl || (null == t.isLoaded ? e.children().length > 0 : t.isLoaded); if (!t.reload && i) { for (var a = e.find(".mvc-grid-headers th"), n = e.find(".mvc-grid-row-filters th"), o = 0; o < a.length; o++) { var l = this.createColumn($(a[o]), n[o]); this.bindFilter(l), this.bindSort(l), this.cleanup(l), this.columns.push(l) } var d = e.find(".mvc-grid-pager"); d.length > 0 && (this.pager = { currentPage: d.find("li.active a").attr("data-page") || 0, showPageSizes: "True" == d.attr("data-show-page-sizes"), rowsPerPage: d.find(".mvc-grid-pager-rows"), pages: d.find("li:not(.disabled)"), element: d }), this.bindPager(), this.bindGrid(), this.clean() } else this.reload() } return e.prototype = { createColumn: function (e, t) { var r = {}; if (r.header = e, r.rowFilter = t, r.name = e.attr("data-name"), "True" == e.attr("data-filter")) { var i = e.find(".mvc-grid-options").remove(); r.filter = { isMulti: "True" == e.attr("data-filter-multi"), operator: e.attr("data-filter-operator"), hasOptions: i.children().length > 0, name: e.attr("data-filter-name"), first: { method: e.attr("data-filter-first-method"), value: e.attr("data-filter-first-value"), options: i }, second: { method: e.attr("data-filter-second-method"), value: e.attr("data-filter-second-value"), options: i } } } return "True" == e.attr("data-sort") && "HeaderRow" != this.filterMode && (r.sort = { firstOrder: e.attr("data-sort-first"), order: e.attr("data-sort-order") }), r }, set: function (e) { for (var t in e) this.hasOwnProperty(t) && ("filters" == t ? this.filters = $.extend(this.filters, e.filters) : "sourceUrl" == t ? (e.hasOwnProperty("query") || (this.query = ""), this.sourceUrl = e.sourceUrl) : this[t] = e[t]); e.reload && this.reload() }, bindFilter: function (e) { if (e.filter && this.filters[e.filter.name]) { var t = this, r = this.filters[e.filter.name], i = $("body").children(".mvc-grid-popup"); $(e.rowFilter || e.header[0]).find(".mvc-grid-filter").on("click.mvcgrid", function (i) { i.preventDefault(), t.renderFilter(e, r) }), $(e.rowFilter).find(".mvc-grid-value").on("keyup.mvcgrid", function (a) { r.isValid(this.value) ? ($(this).removeClass("invalid"), 13 == a.which && r.apply(t, e, i)) : $(this).addClass("invalid") }); var a = $(e.rowFilter).find(".mvc-grid-method"); "" == a.val() && a.val(r.methods[0]); var n = $(e.rowFilter).find(".mvc-grid-value"); n.length && !r.isValid(n.val()) && n.addClass("invalid"), r.initRowFilter(t, e, i) } }, bindSort: function (e) { if (e.sort) { var t = this; e.header.on("click.mvcgrid", function (r) { var i = $(r.target || r.srcElement); i.hasClass("mvc-grid-filter") || 0 != i.parents(".mvc-grid-filter").length || (t.applySort(e), t.reload()) }) } }, bindPager: function () { var e = this; e.pager && (e.pager.rowsPerPage.on("change.mvcgrid", function () { e.applyPage(e.pager.currentPage), e.reload() }), e.pager.pages.on("click.mvcgrid", "a", function (t) { t.preventDefault(); var r = $(this).attr("data-page"); r && (e.applyPage(r), e.reload()) })) }, bindGrid: function () { var e = this; e.element.find("tbody tr:not(.mvc-grid-empty-row)").on("click.mvcgrid", function (t) { for (var r = $(this).find("td"), i = [], a = 0; a < e.columns.length; a++) { var n = e.columns[a]; a < r.length && (i[n.name] = $(r[a]).text()) } e.rowClicked && e.rowClicked(this, i, t), $(this).trigger("rowclick", [i, e, t]) }) }, reload: function () { var e = this; e.element.trigger("reloadStarted", [e]), e.reloadStarted && e.reloadStarted(), e.sourceUrl ? (e.startLoading(), $.ajax({ cache: !1, data: e.data, type: e.requestType, url: e.sourceUrl + "?" + e.query }).done(function (t) { var r = $(t); e.element.replaceWith(r); var i = r.mvcgrid({ reloadStarted: e.reloadStarted, reloadFailed: e.reloadFailed, loadingDelay: e.loadingDelay, reloadEnded: e.reloadEnded, showLoading: e.showLoading, requestType: e.requestType, rowClicked: e.rowClicked, sourceUrl: e.sourceUrl, filters: e.filters, query: e.query, data: e.data, isLoaded: !0 }).data("mvc-grid"); i.element.trigger("reloadEnded", [i]), i.reloadEnded && i.reloadEnded() }).fail(function (t) { e.element.trigger("reloadFailed", [e, t]), e.reloadFailed && e.reloadFailed(t) })) : window.location.href = "?" + e.query }, renderFilter: function (e, t) { var r = this, i = $("body").children(".mvc-grid-popup"); $(window).off("resize.mvcgrid"), $(window).off("click.mvcgrid"), t.render(r, i, e.filter), t.init(r, e, i), r.setFilterPosition(e, i), i.addClass("open"), $(window).on("click.mvcgrid", function (e) { var t = $(e.target || e.srcElement); t.hasClass("mvc-grid-filter") || 0 != t.parents(".mvc-grid-popup").length || t.is('[class*="ui-datepicker"]') || 0 != t.parents('[class*="ui-datepicker"]').length || ($(window).off("click.mvcgrid"), i.removeClass("open")) }), $(window).on("resize.mvcgrid", function () { i.hasClass("open") && (i.removeClass("open"), r.setFilterPosition(e, i), i.addClass("open")) }) }, setFilterPosition: function (e, t) { var r = $(e.rowFilter || e.header[0]).find(".mvc-grid-filter"), i = $(document).width(), a = t.find(".popup-arrow"), n = t.width(), o = r.offset().top + r.height() / 2 + 14, l = r.offset().left - 8, d = r.width() / 2; if (l + n + 13 > i) { var s = l - (i - n - 5); l -= s, d += s } a.css("left", d + "px"), t.css("left", l + "px"), t.css("top", o + "px") }, startLoading: function () { if (this.showLoading && !this.element.children(".mvc-grid-loader").length) { var e = $('<div class="mvc-grid-loader"><div><div></div><div></div><div></div></div></div>'); setTimeout(function () { e.addClass("mvc-grid-loading") }, null == this.loadingDelay ? 300 : this.loadingDelay), this.element.append(e) } }, cancelFilter: function (e) { this.queryRemove(this.prefix + "page"), this.queryRemove(this.prefix + "rows"), this.queryRemoveStartingWith(this.prefix + e.name + "-") }, applyFilter: function (e) { this.cancelFilter(e), this.queryAdd(this.prefix + e.name + "-" + e.filter.first.method, e.filter.first.value), "ExcelRow" == this.filterMode && e.filter.isMulti && (this.queryAdd(this.prefix + e.name + "-op", e.filter.operator), this.queryAdd(this.prefix + e.name + "-" + e.filter.second.method, e.filter.second.value)), this.pager && this.pager.showPageSizes && this.queryAdd(this.prefix + "rows", this.pager.rowsPerPage.val()) }, applySort: function (e) { this.queryRemove(this.prefix + "sort"), this.queryRemove(this.prefix + "order"), this.queryAdd(this.prefix + "sort", e.name); var t = "asc" == e.sort.order ? "desc" : "asc"; !e.sort.order && e.sort.firstOrder && (t = e.sort.firstOrder), this.queryAdd(this.prefix + "order", t) }, applyPage: function (e) { this.queryRemove(this.prefix + "page"), this.queryRemove(this.prefix + "rows"), this.queryAdd(this.prefix + "page", e), this.pager.showPageSizes && this.queryAdd(this.prefix + "rows", this.pager.rowsPerPage.val()) }, queryAdd: function (e, t) { this.query += (this.query ? "&" : "") + encodeURIComponent(e) + "=" + encodeURIComponent(null == t ? "" : t) }, queryRemoveStartingWith: function (e) { for (var t = encodeURIComponent(e), r = this.query.split("&"), i = [], a = 0; a < r.length; a++) { var n = r[a].split("=")[0]; r[a] && 0 != n.indexOf(t) && i.push(r[a]) } this.query = i.join("&") }, queryRemove: function (e) { for (var t = encodeURIComponent(e), r = this.query.split("&"), i = [], a = 0; a < r.length; a++) { var n = r[a].split("=")[0]; r[a] && n != t && i.push(r[a]) } this.query = i.join("&") }, cleanup: function (e) { var t = e.header; t.removeAttr("data-name"), t.removeAttr("data-filter"), t.removeAttr("data-filter-name"), t.removeAttr("data-filter-multi"), t.removeAttr("data-filter-operator"), t.removeAttr("data-filter-first-value"), t.removeAttr("data-filter-first-method"), t.removeAttr("data-filter-second-value"), t.removeAttr("data-filter-second-method"), t.removeAttr("data-sort"), t.removeAttr("data-sort-order"), t.removeAttr("data-sort-first") }, clean: function () { this.element.removeAttr("data-filter-mode"), this.element.removeAttr("data-source-url"), this.pager && this.pager.element.removeAttr("data-show-page-sizes") } }, e }(); function MvcGridExtends(e, t) { function r() { this.constructor = e } Object.setPrototypeOf(e, t), e.prototype = (r.prototype = t.prototype, new r) } var MvcGridFilter = function () { function e() { this.methods = [] } return e.prototype = { render: function (e, t, r) { t.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter">' + this.renderFilter(e, r.first) + "</div>" + ("ExcelRow" == e.filterMode && r.isMulti ? this.renderOperator(e, r, $.fn.mvcgrid.lang.operator) + '<div class="second-filter">' + this.renderFilter(e, r.second) + "</div>" : "") + this.renderActions(e, $.fn.mvcgrid.lang.filter) + "</div>"), t.find(".mvc-grid-operator").val(r.operator), t.find(".first-filter .mvc-grid-method").val(r.first.method || this.methods[0]), t.find(".second-filter .mvc-grid-method").val(r.second.method || this.methods[0]), "date" === r.name ? (t.find(".first-filter .mvc-grid-value").val(jalaliConvertorString(r.first.value, !0)), t.find(".second-filter .mvc-grid-value").val(jalaliConvertorString(r.second.value, !0))) : (t.find(".first-filter .mvc-grid-value").val(r.first.value), t.find(".second-filter .mvc-grid-value").val(r.second.value)) }, renderFilter: function (e, t, r) { var i = t.options.children().length; return '<div class="popup-group"><select class="mvc-grid-method">' + this.methods.reduce(function (e, t) { return e + '<option value="' + t + '">' + r[t] + "</option>" }, "") + "</select></div>" + ("ExcelRow" == e.filterMode || "HeaderRow" == e.filterMode && i ? '<div class="popup-group">' + (i ? '<select class="mvc-grid-value">' + t.options.html() + "</select>" : '<input class="mvc-grid-value" />') + "</div>" : "") }, renderOperator: function (e, t, r) { return '<div class="operator-filter"><div class="popup-group"><select class="mvc-grid-operator"><option value="">' + r.select + '</option><option value="and">' + r.and + '</option><option value="or">' + r.or + "</option></select></div></div>" }, renderActions: function (e, t) { return '<div class="filter-actions"><button class="mvc-grid-apply" type="button">' + t.apply + '</button><button class="mvc-grid-cancel" type="button">' + t.remove + "</button></div>" }, init: function (e, t, r) { this.bindMethod(e, t, r), this.bindValue(e, t, r), this.bindApply(e, t, r), this.bindCancel(e, t, r) }, initRowFilter: function (e, t, r) { var i = this; $(t.rowFilter).on("change.mvcgrid", "select.mvc-grid-value", function () { i.apply(e, t, r) }), "HeaderRow" == e.filterMode && t.filter.hasOptions && $(t.rowFilter).find("input.mvc-grid-value").attr("readonly", "readonly") }, bindMethod: function (e, t, r) { r.find(".mvc-grid-method").on("change.mvcgrid", function () { $(t.rowFilter).find(".mvc-grid-method").val(this.value) }) }, bindValue: function (e, t, r) { var i = this, a = r.find(".mvc-grid-value"); a.on("keyup.mvcgrid", function (a) { i.isValid(this.value) ? ($(this).removeClass("invalid"), 13 == a.which && i.apply(e, t, r)) : $(this).addClass("invalid") }); for (var n = 0; n < a.length; n++)i.isValid(a[n].value) || $(a[n]).addClass("invalid") }, bindApply: function (e, t, r) { var i = this; r.find(".mvc-grid-apply").on("click.mvcgrid", function () { i.apply(e, t, r) }) }, bindCancel: function (e, t, r) { var i = this; r.find(".mvc-grid-cancel").on("click.mvcgrid", function () { i.cancel(e, t, r) }) }, isValid: function (e) { return !0 }, apply: function (e, t, r) { r.removeClass("open"); var i = $(t.rowFilter || r); t.filter.operator = i.find(".mvc-grid-operator").val(), t.filter.first.method = i.find(".first-filter .mvc-grid-method").val(), t.filter.second.method = i.find(".second-filter .mvc-grid-method").val(), "FilterRow" != e.filterMode && t.filter.hasOptions ? (t.filter.first.value = r.find(".first-filter .mvc-grid-value").val(), t.filter.second.value = r.find(".second-filter .mvc-grid-value").val()) : "date" === t.filter.name ? (t.filter.first.value = jalaliConvertorString(i.find(".first-filter .mvc-grid-value").val()), t.filter.second.value = jalaliConvertorString(i.find(".second-filter .mvc-grid-value").val())) : (t.filter.first.value = i.find(".first-filter .mvc-grid-value").val(), t.filter.second.value = i.find(".second-filter .mvc-grid-value").val()), e.applyFilter(t), e.reload() }, cancel: function (e, t, r) { r.removeClass("open"), (t.filter.first.method || t.filter.second.method) && (e.cancelFilter(t), e.reload()) } }, e }(), MvcGridTextFilter = function (e) { function t() { e.apply(this), this.methods = ["contains", "equals", "not-equals", "starts-with", "ends-with"] } return MvcGridExtends(t, e), t.prototype.renderFilter = function (t, r) { return e.prototype.renderFilter.call(this, t, r, $.fn.mvcgrid.lang.text) }, t }(MvcGridFilter), MvcGridNumberFilter = function (e) { function t() { e.apply(this), this.methods = ["equals", "not-equals", "less-than", "greater-than", "less-than-or-equal", "greater-than-or-equal"] } return MvcGridExtends(t, e), t.prototype.renderFilter = function (t, r) { return e.prototype.renderFilter.call(this, t, r, $.fn.mvcgrid.lang.number) }, t.prototype.isValid = function (e) { return !e || /^(?=.*\d+.*)[-+]?\d*[.,]?\d*$/.test(e) }, t }(MvcGridFilter), MvcGridDateFilter = function (e) { function t() { e.apply(this), this.methods = ["equals", "not-equals", "earlier-than", "later-than", "earlier-than-or-equal", "later-than-or-equal"] } return MvcGridExtends(t, e), t.prototype.renderFilter = function (t, r) { return e.prototype.renderFilter.call(this, t, r, $.fn.mvcgrid.lang.date) }, t.prototype.initRowFilter = function (e, t, r) { var i = this; $.fn.datepicker && $(t.rowFilter).find(".mvc-grid-value").datepicker({ onSelect: function (a, n) { a != n.lastVal && i.apply(e, t, r) } }) }, t.prototype.bindValue = function (t, r, i) { $.fn.datepicker && i.find(".mvc-grid-value").each(function (e) { $(this).attr("id", "mvcgrid-datepicker-" + (e + 1)), $("#mvcgrid-datepicker-" + (e + 1)).buildKamaDatepicker() }), e.prototype.bindValue.call(this, t, r, i) }, t }(MvcGridFilter), MvcGridEnumFilter = function (e) { function t() { e.apply(this), this.methods = ["equals", "not-equals"] } return MvcGridExtends(t, e), t.prototype.renderFilter = function (t, r) { return e.prototype.renderFilter.call(this, t, r, $.fn.mvcgrid.lang.enum) }, t }(MvcGridFilter), MvcGridBooleanFilter = function (e) { function t() { e.apply(this), this.methods = ["equals", "not-equals"] } return MvcGridExtends(t, e), t.prototype.renderFilter = function (t, r) { return e.prototype.renderFilter.call(this, t, r, $.fn.mvcgrid.lang.boolean) }, t }(MvcGridFilter); $.fn.mvcgrid = function (e) { var t = arguments; if ("instance" === e) { for (var r = [], i = 0; i < this.length; i++) { var a = $(this[i]).closest(".mvc-grid"); if (a.length) { var n = a.data("mvc-grid"); n || a.data("mvc-grid", n = new MvcGrid(a, e)), r.push(n) } } return this.length <= 1 ? r[0] : r } return this.each(function () { var r = $(this).closest(".mvc-grid"); if (r.length) { var i = r.data("mvc-grid"); i ? "string" == typeof e ? i.methods[e].apply(i, [].slice.call(t, 1)) : e && i.set(e) : ("string" == typeof e ? (i = new MvcGrid(r)).methods[e].apply(i, [].slice.call(t, 1)) : i = new MvcGrid(r, e), $.data(r[0], "mvc-grid", i)) } }) }, $.fn.mvcgrid.lang = { text: { contains: "Contains", equals: "Equals", "not-equals": "Not equals", "starts-with": "Starts with", "ends-with": "Ends with" }, number: { equals: "Equals", "not-equals": "Not equals", "less-than": "Less than", "greater-than": "Greater than", "less-than-or-equal": "Less than or equal", "greater-than-or-equal": "Greater than or equal" }, date: { equals: "Equals", "not-equals": "Not equals", "earlier-than": "Earlier than", "later-than": "Later than", "earlier-than-or-equal": "Earlier than or equal", "later-than-or-equal": "Later than or equal" }, enum: { equals: "Equals", "not-equals": "Not equals" }, boolean: { equals: "Equals", "not-equals": "Not equals" }, filter: { apply: "&#10004;", remove: "&#10008;" }, operator: { select: "", and: "and", or: "or" } }, $(function () { $("body").append('<div class="mvc-grid-popup"></div>') });